#!/usr/bin/env python

"""
Regional Intersection Graph (RIG) Construction by
One-pass Sweepline Algorithm -- NetworkX

This script implements the NxGraphSweepCtor (or one-pass sweep-line regional
intersection graph construction algorithm). This algorithm builds an
undirected, labelled graph of all the pair-wise intersections or overlapping
regions between a collection of regions with the same dimensionality. The
graph representation is implemented as a NetworkX graph.

Classes:
- NxGraphSweepCtor
"""

from typing import Tuple

from sources.algorithms.sweepln.regionsweep import RegionSweep
from sources.algorithms.sweepln.sweepln import Sweepln, SweepRunner
from sources.datastructs.datasets.regionset import RegionSet
from sources.datastructs.rigraphs.nxgraph import NxGraph
from sources.datastructs.shapes.region import Region, RegionPair


class NxGraphSweepCtor(RegionSweep, Sweepln[Region], SweepRunner[Region, NxGraph]):
  """
  Implementation of regional intersection graph construction based on a one-
  pass sweep-line algorithm. This algorithm builds an undirected, weighted
  graph of all the pair-wise intersections or overlapping regions within a
  RegionSet. Inherits from: Sweepln, SweepRunner[NxGraph] and RegionSweep.
  The graph representation is implemented as a NetworkX graph.

  Attributes:
    G:
      The NetworkX graph representation of
      intersecting Regions.

  Inherited from RegionSweep:

    Attributes:
      id:        
        The unique identifier for this SweepRunner.
      events:
        Mapping of event kinds to event callbacks.
      sweepln:
        The Sweepln algorithm for which its binded.
      timeline:
        The Timeline to evaluate sweep-line over.
      running:
        Boolean flag for whether or not the
        algorithm is currently running.
      dimension:
        The dimension to evaluate sweep-line over.
      actives:
        The active Regions during sweep-line.
      overlaps:
        The resulting pairwise overlaps.

    Properties:
      binded:
        Whether or not this SweepRunner is binded to a
        Sweepln algorithm. True if it is binded, False 
        otherwise.
      initialized:
        Whether or not this SweepRunner has been
        initialized for evaluation. True if it is
        initialized, False otherwise.
      regions:
        The RegionSet to evaluate sweep-line over.

    Methods:
      Special:  __init__
      Instance: bind, unbind, results, findoverlaps,
                addoverlap, hasevent, onevent, oninit,
                onbegin, onend, onfinal

    Overridden Methods:
      Special:  __init__
      Instance: results, oninit, addoverlap

  Inherited from Sweepln:

    Attributes:
      runners: 
        The SweepRunners which are binded 
        to this Sweepln.
      results:
        The dict of results generated by each
        of the SweepRunners.
      timeline:
        The Timeline to evaluate the 
        algorithm over.

    Methods:
      Special:    __init__, __getitem__, __setitem__
      Instance:   put, evaluate

    Overridden Methods:
      Special:    __init__
  """
  G: NxGraph

  def __init__(self, regions: RegionSet, id: str = ''):
    """
    Initialize the intersection graph construction
    by sweep-line algorithm with the given RegionSet.

    Args:
      regions:
        The RegionSet to evaluate sweep-line over.
      id:
        The unique identifier for this Region
        Randonly generated with UUID v4, if not provided.
    """
    RegionSweep.__init__(self, id)
    Sweepln.__init__(self, regions.timeline)
    Sweepln.put(self, self)

  ### Methods: RegionSweep

  def results(self) -> NxGraph:
    """
    Returns the newly constructed intersection NetworkX graph,
    constructed from the RegionSet using the sweep-line algorithm.

    Returns:
      The newly constructed intersection NetworkX graph.
    """
    return self.G

  def oninit(self, **kwargs):
    """
    Initialize the evaluation of the RegionSet in the RegionSweep with the
    given dimensions. Create a new intersection Graph and populate it with
    nodes for each Region. This method extends the superclass
    implementation.

    Args:
      kwargs:
        Additional arguments

    kwargs:
      dimension:
        The dimension to evaluate sweep-line over.
    """
    RegionSweep.oninit(self, **kwargs)

    self.G = NxGraph(self.regions.dimension)

    for region in self.regions:
      self.G.put_region(region)

  def addoverlap(self, regionpair: RegionPair):
    """
    Add the given pair of Regions to the intersection graph as an edge.
    The intersection Region is added to the edge as an data attribute.
    This method overrides in superclass implementation.

    Args:
      regionpair:
        The pair of Regions to add as overlaps.
    """
    assert isinstance(regionpair, Tuple) and len(regionpair) == 2
    assert all([isinstance(r, Region) for r in regionpair])

    self.G.put_overlap(regionpair)
